(cl21:in-package :cl21-user)
(defpackage overmind-perception
  (:use :cl21
	:lparallel
	:overmind-input)
  (:export :get-data
	   :*data-count*
	   :*partition-size*)
  (:nicknames :omper))
(in-package :overmind-perception)

(defparameter *area-positions*
  #H(:AUD_CAD (expt 10 -3)
     :AUD_CHF (expt 10 -3)
     :AUD_HKD (expt 10 -2)
     :AUD_JPY (expt 10 -1)
     :AUD_NZD (expt 10 -3)
     :AUD_SGD (expt 10 -3)
     :AUD_USD (expt 10 -3)
     :CAD_CHF (expt 10 -3)
     :CAD_HKD (expt 10 -2)
     :CAD_JPY (expt 10 -1)
     :CAD_SGD (expt 10 -3)
     :CHF_HKD (expt 10 -2)
     :CHF_JPY (expt 10 -1)
     :CHF_ZAR (expt 10 -1)
     :EUR_AUD (expt 10 -3)
     :EUR_CAD (expt 10 -3)
     :EUR_CHF (expt 10 -3)
     :EUR_CZK (expt 10 -2)
     :EUR_DKK (expt 10 -3)
     :EUR_GBP (expt 10 -3)
     :EUR_HKD (expt 10 -2)
     :EUR_HUF (expt 10 -0)
     :EUR_JPY (expt 10 -1)
     :EUR_NOK (expt 10 -2)
     :EUR_NZD (expt 10 -3)
     :EUR_PLN (expt 10 -2)
     :EUR_SEK (expt 10 -2)
     :EUR_SGD (expt 10 -3)
     :EUR_TRY (expt 10 -2)
     :EUR_USD (expt 10 -3)
     :EUR_ZAR (expt 10 -1)
     :GBP_AUD (expt 10 -3)
     :GBP_CAD (expt 10 -3)
     :GBP_CHF (expt 10 -3)
     :GBP_HKD (expt 10 -2)
     :GBP_JPY (expt 10 -1)
     :GBP_NZD (expt 10 -3)
     :GBP_PLN (expt 10 -2)
     :GBP_SGD (expt 10 -3)
     :GBP_USD (expt 10 -3)
     :GBP_ZAR (expt 10 -1)
     :HKD_JPY (expt 10 -2)
     :NZD_CAD (expt 10 -3)
     :NZD_CHF (expt 10 -3)
     :NZD_HKD (expt 10 -2)
     :NZD_JPY (expt 10 -1)
     :NZD_SGD (expt 10 -3)
     :NZD_USD (expt 10 -3)
     :SGD_CHF (expt 10 -3)
     :SGD_HKD (expt 10 -2)
     :SGD_JPY (expt 10 -1)
     :TRY_JPY (expt 10 -1)
     :USD_CAD (expt 10 -3)
     :USD_CHF (expt 10 -3)
     :USD_CNH (expt 10 -2)
     :USD_CZK (expt 10 -1)
     :USD_DKK (expt 10 -2)
     :USD_HKD (expt 10 -3)
     :USD_HUF (expt 10 -0)
     :USD_INR (expt 10 -1)
     :USD_JPY (expt 10 -1)
     :USD_MXN (expt 10 -1)
     :USD_NOK (expt 10 -2)
     :USD_PLN (expt 10 -2)
     :USD_SAR (expt 10 -3)
     :USD_SEK (expt 10 -2)
     :USD_SGD (expt 10 -3)
     :USD_THB (expt 10 -1)
     :USD_TRY (expt 10 -2)
     :USD_ZAR (expt 10 -1)
     :ZAR_JPY (expt 10 -1)

     ;; indices
     :AU200_AUD (expt 10 1)
     :CN50_USD (expt 10 2)
     :EU50_EUR (expt 10 1)
     :FR40_EUR (expt 10 1)
     :DE30_EUR (expt 10 2)
     :HK33_HKD (expt 10 2)
     :IN50_USD (expt 10 2)
     :JP225_USD (expt 10 2)
     :NL25_EUR (expt 10 1)
     :SG30_SGD (expt 10 0)
     :TWIX_USD (expt 10 0)
     :UK100_GBP (expt 10 1)
     :NAS100_USD (expt 10 2)
     :US2000_USD (expt 10 1)
     :SPX500_USD (expt 10 1)
     :US30_USD (expt 10 2)

     ;; commodities
     :BCO_USD (expt 10 0)
     :XCU_USD (expt 10 -2)
     :CORN_USD (expt 10 -2)
     :NATGAS_USD (expt 10 -1)
     :SOYBN_USD (expt 10 -2)
     :SUGAR_USD (expt 10 -3)
     :WTICO_USD (expt 10 0)
     :WHEAT_USD (expt 10 -2)

     ;; bonds
     :DE10YB_EUR (expt 10 -1)
     :UK10YB_GBP (expt 10 -1)
     :USB10Y_USD (expt 10 -1)
     :USB02Y_USD (expt 10 -1)
     :USB05Y_USD (expt 10 -1)
     :USB30Y_USD (expt 10 -1)
     
     ;; metals
     :XAU_USD (expt 10 0)
     :XAU_XAG (expt 10 -1)
     :XPD_USD (expt 10 1)
     :XPT_USD (expt 10 1)
     :XAG_USD (expt 10 -1)
     ))

(defun correct-heats (ht-data area-position)
  (let (max-rate min-rate)
    (map (lm (data)
           (let ((keys (hash-keys (gethash data :heat)))
                 mx mn)
             (setf mx (apply #'max keys))
             (setf mn (apply #'min keys))
             (if (or (not max-rate) (> mx max-rate))
                 (setf max-rate mx))
             (if (or (not min-rate) (< mn min-rate))
                 (setf min-rate mn))))
         ht-data)
    (map (lm (rate)
           (map (lm (ht)
                  ;; (print (gethash (gethash ht :heat) 1.145))
                  ;; (print (hash-keys (gethash ht :heat)))
                  (if (not (gethash (gethash ht :heat) rate nil))
                      (setf (gethash (gethash ht :heat) rate) 0))
                  )
                ht-data))
         (append (map (lm (rate)
			(* rate area-position))
		      (iota (- (/ max-rate area-position)
			       (/ min-rate area-position))
			    :start (/ min-rate area-position)))
                 `(,max-rate)))

    ;; transforming the heat hash-tables to alists and ordering them
    (map (lm (ht)
           (setf (gethash ht :heat) (split-heatmap-y-z (sort-by-price (gethash ht :heat)))))
         ht-data)
    ht-data))

(defun diffs (rates &optional (bid? t))
  "Calculates the difference between two close prices."
  (let* ((bid-or-ask (if bid? :close-bid :close-ask))
         (closes (map (lm (rate)
                        (rest (assoc bid-or-ask rate))
                        )
                      rates)))
    (map (lm (price delta)
           (cons price delta))
         (rest closes)
         (map (lm (c1 c2)
                (- c2 c1))
              closes
              (rest closes))
         )))

(defun ts-partition (n ts)
  (remove nil
          (pmaplist (lm (ts)
                     (if (>= (length ts) n)
                         (take n ts)))
                    ts)))

(defun fibos (diffs levels)
  "Returns fibos from bigger to smaller."
  (sort (flatten (map (lm (diff)
                        (let ((price (first diff))
                              (delta (rest diff)))
                          (map (lm (level)
                                 (+ price (* delta level)))
                               levels)
                          ))
                      diffs))
        #'>))

(defun sort-by-price (table)
  (sort (hash-table-alist table) #'< :key #'car))

(defun hash-table-alist (table)
  "Returns an association list containing the keys and values of hash table TABLE."
  (let ((alist nil))
    (maphash (lambda (k v)
               (push (cons k v) alist))
             table)
    alist))

(defun heatmap-values (fibos area-position)
  ;; area-size is in pips
  (let* ((max-area (ceiling (first fibos) area-position))
         (min-area (floor (last fibos) area-position))
         (n (- max-area min-area))
         (ht (make-hash-table :test #'equal)))
    ;; initializing the hash-table

    (map (lm (price)
           (setf (gethash ht (* price area-position)) 0)
           )
         (iota n :start min-area :step 1))
    (map (lm (fib)
           (if (gethash ht (* (floor fib area-position) area-position))
               (incf (gethash ht (* (floor fib area-position) area-position))))
           )
         fibos)
    ht))

(defun split-heatmap-y-z (alist)
  #H(:y (map (lm (elt) (car elt)) alist)
     :z (map (lm (elt) (cdr elt)) alist)))

;; (defparameter *ratio* 1/5)
(defparameter *data-count* 252)
(defparameter *partition-size* 100)
;; (get-data :EUR_USD (get-rates :EUR_USD 1 :M5))
(defun get-data (instrument rates &key (levels '(0.382 0.5 0.618 1 1.618)))
  (let* ((partition-size *partition-size*)
         (sample-size (- (length rates)
                         partition-size))
         
         ;; (area-position (expt 10 1))
         ;; (pip-position (expt 10 -4))

         ;; (area-position (expt 10 -3))
         (area-position (gethash *area-positions* instrument))
         
         ;; (ratio *ratio*)
         )
    (correct-heats
     (let ((res (map (lm (fibs rate)
                       (let ((ht (make-hash-table :test 'equal)))
                         ;; (setf (gethash ht :rate) (cdar rate))
                         (setf (gethash ht :open) (cdr (assoc :open-bid rate)))
                         (setf (gethash ht :high) (cdr (assoc :high-bid rate)))
                         (setf (gethash ht :low) (cdr (assoc :low-bid rate)))
                         (setf (gethash ht :close) (cdr (assoc :close-bid rate)))
                         
                         ;; (setf (gethash ht :time) (cdadr rate))
                         (setf (gethash ht :time) (cdr (assoc :time rate)))
                         (setf (gethash ht :heat) fibs)
                         ht)
            
                       ;; #H(:rate (cdar rate)
                       ;;          :time (cdadr rate)
                       ;;          :heat fibs)
                       )
                     (map (lm (diffs)
                            (let ((fibos (fibos diffs levels)))
                              (if fibos
                                  (heatmap-values fibos area-position))
                              )
                            )
                          (pmapcar #'diffs (ts-partition partition-size rates))
                          )
                     (subseq rates (- partition-size 1))
                     )))
       ;; (subseq res (- (length res) (round (* (length res) *ratio*))))
       (subseq res (- (length res) *data-count*)))
     area-position)))
